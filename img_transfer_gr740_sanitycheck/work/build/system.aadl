--  TASTE Concurrency View - Generated by Kazoo, do not edit manually
--  Generated by the template: ~/tool-src/kazoo/templates/concurrency_view/aadl_2_threads/system.tmplt

package Receiver_Image_Thread
public
   with Deployment;
   with Process_Package;
   with Dataview;

thread Receiver_Image
features
   INPORT_Image : in event data port DataView::RawData_Buffer.impl
      { Compute_Execution_Time =>  0 ms ..  0 ms;
        Queue_Size =>  1;
        Compute_Entrypoint_Source_Text => "call_receiver_image"; };
end Receiver_Image;

thread implementation Receiver_Image.others
properties
   Activate_Entrypoint_Source_Text => "init_receiver";
   Dispatch_Protocol                 => Sporadic;
   Period                            => 1 ms;
   Dispatch_Offset                   =>  0 ms;
   Compute_Execution_Time            =>  0 ms ..  0 ms;
   Stack_Size                        => 13000000 Bytes;
   Priority                          => 1;
end Receiver_Image.others;

end Receiver_Image_Thread;
package Sender_Trigger_Thread
public
   with Deployment;
   with Process_Package;
   with Dataview;

thread Sender_Trigger
features
   OUTPORT_Receiver_Image : out event data port DataView::RawData_Buffer.impl;
end Sender_Trigger;

thread implementation Sender_Trigger.others
properties
   Activate_Entrypoint_Source_Text => "init_sender";
   Compute_Entrypoint_Source_Text    => "call_sender_trigger";
   Dispatch_Protocol                 => Periodic;
   Period                            =>  200 ms;
   Dispatch_Offset                   =>  0 ms;
   Compute_Execution_Time            =>  0 ms ..  0 ms;
   Stack_Size                        => 13000000 Bytes;
   Priority                          => 1;
end Sender_Trigger.others;

end Sender_Trigger_Thread;

package Process_Package
public
   with arinc653;
   with Deployment;
   with DataView;
   with interfaceview::IV;
   with deploymentview::DV;
   with deploymentview::DV::node1;
   with Receiver_Image_Thread;
   with Sender_Trigger_Thread;
   with Ocarina_Processors_Leon;

data TASTE_Protected
properties
   Concurrency_Control_Protocol => Protected_Access;
end TASTE_Protected;

data implementation TASTE_Protected.Object
properties
   Concurrency_Control_Protocol => Protected_Access;
end TASTE_Protected.Object;

--  Required by AIR to allow inter-partition communications
subprogram do_ports_polling
properties
   Source_Language => C;
   Source_Name     => "user_ports_polling";
   Source_Text     => ("air_polling.c");
end do_ports_polling;
thread Port_Poller
end    Port_Poller;

thread implementation Port_Poller.i
calls
   Mycalls: {
      P_Spg : subprogram do_ports_polling;
   };
properties
   Dispatch_Protocol => Periodic;
   Period            => 100 ms;
   Deadline          => 100 ms;
end Port_Poller.i;


processor node1_Board extends ocarina_processors_leon::gr740
end node1_Board;

processor implementation node1_Board.final extends ocarina_processors_leon::gr740.rtems51_posix
end node1_Board.final;


process Gr740_Partition extends DeploymentView::DV::Node1::Gr740_Partition
end gr740_partition;

process implementation Gr740_Partition.final
subcomponents
   receiver_protected : data TASTE_Protected.Object;
   
   sender_protected : data TASTE_Protected.Object;
   receiver_image : thread receiver_image_Thread::receiver_image.others;
   sender_trigger : thread sender_trigger_Thread::sender_trigger.others;
connections
   port Sender_Trigger.OUTPORT_Receiver_Image -> Receiver_Image.INPORT_Image;
end Gr740_Partition.final;

system DeploymentView
end DeploymentView;

system implementation DeploymentView.final
subcomponents
   Gr740_Partition : process Gr740_Partition.final;
   Node1_gr740_rtems51_posix : processor Node1_Board.final;
properties
   Actual_Processor_Binding => (reference (Node1_gr740_rtems51_posix)) applies to Gr740_Partition;
--  patchable area (do not remove this line):
end DeploymentView.final;

end Process_Package;

-- deploymenttview.final
