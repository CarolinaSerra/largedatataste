/* File generated by kazoo for TASTE - do not edit */
#include <stddef.h>

// Include PolyORB-HI-C header files:
#include "types.h"
#include "deployment.h"
#include "po_hi_transport.h"
#include "po_hi_gqueue.h"
#include "activity.h"
#include "po_hi_task.h"
#include "po_hi_protected.h"


// Protected provided interfaces of function receiver

   extern void receiver_a(const char *IN_buf_vara, size_t size_IN_buf_vara);
   void pro_receiver_a(const char *IN_buf_vara, size_t size_IN_buf_vara);

   extern void receiver_image(const char *IN_buf_img_data, size_t size_IN_buf_img_data);
   void pro_receiver_image(const char *IN_buf_img_data, size_t size_IN_buf_img_data);

// End of the protected provided interfaces of function receiver

// Required interfaces of function receiver

// Required interface b in function receiver
// This RI is connected to: sender
void vm_receiver_b
        (const char *IN_buf_varb, size_t size_IN_buf_varb);


// Required interface d in function receiver
// This RI is connected to: sender
void vm_receiver_d
        (const char *IN_buf_vard, size_t size_IN_buf_vard);


// Required interface f in function receiver
// This RI is connected to: sender
void vm_receiver_f
        (const char *IN_buf_varf, size_t size_IN_buf_varf);


// Required interface h in function receiver
// This RI is connected to: sender
void vm_receiver_h
        (const char *IN_buf_varh, size_t size_IN_buf_varh);


// Required interface j in function receiver
// This RI is connected to: sender
void vm_receiver_j
        (const char *IN_buf_j, size_t size_IN_buf_j);


// Required interface l in function receiver
// This RI is connected to: sender
void vm_receiver_l
        (const char *IN_buf_varl, size_t size_IN_buf_varl);


// Required interface n in function receiver
// This RI is connected to: sender
void vm_receiver_n
        (const char *IN_buf_varn, size_t size_IN_buf_varn);


// Required interface p in function receiver
// This RI is connected to: sender
void vm_receiver_p
        (const char *IN_buf_varp, size_t size_IN_buf_varp);


// Required interface r in function receiver
// This RI is connected to: sender
void vm_receiver_r
        (const char *IN_buf_varr, size_t size_IN_buf_varr);


// Required interface t in function receiver
// This RI is connected to: sender
void vm_receiver_t
        (const char *IN_buf_vart, size_t size_IN_buf_vart);


// Required interface testint in function receiver
// This RI is connected to: sender
void vm_receiver_testint
        (const char *IN_buf_int2, size_t size_IN_buf_int2);


// Required interface v in function receiver
// This RI is connected to: sender
void vm_receiver_v
        (const char *IN_buf_varv, size_t size_IN_buf_varv);


// Required interface x in function receiver
// This RI is connected to: sender
void vm_receiver_x
        (const char *IN_buf_varx, size_t size_IN_buf_varx);


// Required interface z in function receiver
// This RI is connected to: sender
void vm_receiver_z
        (const char *IN_buf_varz, size_t size_IN_buf_varz);


// End of the required interfaces of function receiver

// Protected provided interfaces of function sender

   extern void sender_b(const char *IN_buf_varb, size_t size_IN_buf_varb);
   void pro_sender_b(const char *IN_buf_varb, size_t size_IN_buf_varb);

   extern void sender_testint(const char *IN_buf_int2, size_t size_IN_buf_int2);
   void pro_sender_testint(const char *IN_buf_int2, size_t size_IN_buf_int2);


// End of the protected provided interfaces of function sender

// Required interfaces of function sender

// Required interface a in function sender
// This RI is connected to: receiver
void vm_sender_a
        (const char *IN_buf_vara, size_t size_IN_buf_vara);


// Required interface c in function sender
// This RI is connected to: receiver
void vm_sender_c
        (const char *IN_buf_varc, size_t size_IN_buf_varc);


// Required interface e in function sender
// This RI is connected to: receiver
void vm_sender_e
        (const char *IN_buf_vare, size_t size_IN_buf_vare);


// Required interface g in function sender
// This RI is connected to: receiver
void vm_sender_g
        (const char *IN_buf_varg, size_t size_IN_buf_varg);


// Required interface i in function sender
// This RI is connected to: receiver
void vm_sender_i
        (const char *IN_buf_vari, size_t size_IN_buf_vari);


// Required interface image in function sender
// This RI is connected to: receiver
void vm_sender_image
        (const char *IN_buf_img_data, size_t size_IN_buf_img_data);


// Required interface k in function sender
// This RI is connected to: receiver
void vm_sender_k
        (const char *IN_buf_vark, size_t size_IN_buf_vark);


// Required interface m in function sender
// This RI is connected to: receiver
void vm_sender_m
        (const char *IN_buf_varm, size_t size_IN_buf_varm);


// Required interface o in function sender
// This RI is connected to: receiver
void vm_sender_o
        (const char *IN_buf_varo, size_t size_IN_buf_varo);


// Required interface q in function sender
// This RI is connected to: receiver
void vm_sender_q
        (const char *IN_buf_varq, size_t size_IN_buf_varq);


// Required interface s in function sender
// This RI is connected to: receiver
void vm_sender_s
        (const char *IN_buf_vars, size_t size_IN_buf_vars);


// Required interface u in function sender
// This RI is connected to: receiver
void vm_sender_u
        (const char *IN_buf_varu, size_t size_IN_buf_varu);


// Required interface w in function sender
// This RI is connected to: receiver
void vm_sender_w
        (const char *IN_buf_varw, size_t size_IN_buf_varw);


// Required interface y in function sender
// This RI is connected to: receiver
void vm_sender_y
        (const char *IN_buf_vary, size_t size_IN_buf_vary);


// End of the required interfaces of function sender


void call_receiver_a (__po_hi_task_id, dataview__myinteger_buffer_impl *);


void call_receiver_image (__po_hi_task_id, dataview__rawdata_buffer_impl *);


void call_sender_b (__po_hi_task_id, dataview__myinteger_buffer_impl *);


void call_sender_testint (__po_hi_task_id, dataview__myinteger_buffer_impl *);


void call_sender_trigger (__po_hi_task_id);


