all: node1_gr740_rtems51_posix

# Generate a dynamic library excluding the runtime for each node
simu: node1_simu

DriversConfig/drivers_config.h:  # Not a distributed system => nothing to do


# Build of node node1 for PLATFORM_LEON_RTEMS_POSIX
# (rule generated by templates/concurrency_view/aadl_4_makefile/node.tmplt)
CROSS_GNATMAKE?=sparc-rtems5-gnatmake
CROSS_GNATBIND?=sparc-rtems5-gnatbind

node1_gr740_rtems51_posix: gr740_partition_with_adainit DriversConfig/drivers_config.h
	$(MAKE) -j -C node1 -f Makefile.node1



#  Build of partition gr740_partition (common to all targets)
# (rule generated by templates/concurrency_view/aadl_4_makefile/partition.tmplt)
gr740_partition:	receiver  sender
	args=$$(python3 -c "import os, sys; print(' '.join({os.path.basename(f):f for f in sys.argv[1:]}.values()))" ../dataview/dataview-uniq.asn); \
	mkdir -p ../dataview/Ada; asn1scc -Ada -equal --target allboards -typePrefix asn1Scc -o ../dataview/Ada $$args 

gr740_partition_simu:	receiver  sender
	args="../dataview/dataview-uniq.asn simulation.asn"; \
	mkdir -p ../dataview/Ada; asn1scc -Ada -uPER -equal --target allboards -typePrefix asn1Scc -o ../dataview/Ada $$args; \
	taste-asn1-gser -o ../dataview/Ada/src --raw $$args || exit 1



# Build of partition gr740_partition with the additional generation of adainit symbol
# to initialize Ada modules while the entry point of the node is in C (POHIC)
# This is only needed on some platforms ; gnat on Linux generates it automatically
# (rule generated by templates/concurrency_view/aadl_4_makefile/partition.tmplt)
gr740_partition_with_adainit : gr740_partition
	mkdir -p gr740_partition_adainit && \
    echo 'package adainit is end adainit;' >gr740_partition_adainit/tasteada.ads && \
        cd gr740_partition_adainit && \
    ADA_INCLUDE_PATH=../../dataview/Ada/src:../../dataview/Ada/asn1rtl:../../dataview/Ada/boards/x86 \
$(CROSS_GNATMAKE) -c tasteada.ads && $(CROSS_GNATBIND) -t -n tasteada.ali -o ada-start.adb && mkdir -p ../node1/ada_code_startup && mv ada-start.* ../node1/ada_code_startup


receiver:
	@# Placeholder if anything has to be done for this function coded in C

sender:
	@# Placeholder if anything has to be done for this function coded in C


clean:
	$(MAKE) -C node1 -f Makefile.node1 clean
	rm -rf *_adainit deploymentview_final

.PHONY:	receiver sender
